using System;
using System.Collections.Generic;
using UnityEngine;
using Random = UnityEngine.Random;

// 이 파일은 여러 유용한 유틸리티 클래스를 포함하고 있습니다.
// 1. CLog: 색상과 접두사를 지원하는 커스텀 디버그 로그입니다.
// 2. ExtraColors: Unity 기본 색상 외에 추가적인 색상 상수를 제공합니다.
// 3. Singleton<T>: 어떤 클래스든 싱글톤으로 만들어주는 제네릭 클래스입니다.
// 4. Utils: 고급 기능 또는 특정 계산을 수행하는 유틸리티 함수 모음입니다.
// 5. Extensions: 기존 클래스(GameObject, Transform, Vector3 등)에 새로운 기능을 추가하는 확장 메서드 모음입니다.

#region === 로깅 (Logging) ===

/// <summary>
/// 색상과 접두사를 지원하는 커스텀 디버그 로그 클래스입니다.
/// </summary>
public static class CLog
{
    /// <summary>
    /// 일반 로그를 출력합니다.
    /// </summary>
    /// <param name="message">로그 메시지</param>
    /// <param name="prefix">접두사 (예: "System", "Network")</param>
    public static void Log(object message, string prefix = "Game")
    {
        Debug.Log($"[{prefix}] {message}");
    }

    /// <summary>
    /// 색상이 적용된 로그를 출력합니다.
    /// </summary>
    /// <param name="message">로그 메시지</param>
    /// <param name="color">적용할 색상</param>
    /// <param name="prefix">접두사</param>
    public static void Log(object message, Color color, string prefix = "Game")
    {
        string colorHex = ColorUtility.ToHtmlStringRGB(color);
        Debug.Log($"<color=#{colorHex}>[{prefix}]</color> {message}");
    }

    /// <summary>
    /// 경고 로그를 출력합니다.
    /// </summary>
    public static void Warning(object message, string prefix = "Game")
    {
        Debug.LogWarning($"[{prefix}] {message}");
    }

    /// <summary>
    /// 에러 로그를 출력합니다.
    /// </summary>
    public static void Error(object message, string prefix = "Game")
    {
        Debug.LogError($"[{prefix}] {message}");
    }
}

#endregion

#region === 추가 색상 (Extra Colors) ===

/// <summary>
/// Unity 기본 색상 외에 자주 사용되는 추가 색상들을 정의한 클래스입니다.
/// </summary>
public static class ExtraColors
{
    public static readonly Color Orange = new Color(1.0f, 0.5f, 0.0f);
    public static readonly Color Pink = new Color(1.0f, 0.4118f, 0.7059f);
    public static readonly Color Purple = new Color(0.5f, 0.0f, 0.5f);
    public static readonly Color Indigo = new Color(75f / 255f, 0.0f, 130f / 255f);
    public static readonly Color Teal = new Color(0.0f, 0.5f, 0.5f);
    public static readonly Color Brown = new Color(165f / 255f, 42f / 255f, 42f / 255f);
    public static readonly Color Crimson = new Color(220f / 255f, 20f / 255f, 60f / 255f);
    public static readonly Color Gold = new Color(1.0f, 215f / 255f, 0.0f);
    public static readonly Color Silver = new Color(192f / 255f, 192f / 255f, 192f / 255f);
    public static readonly Color Transparent = new Color(0f, 0f, 0f, 0f);
}

#endregion

#region === 싱글톤 (Singleton) ===

/// <summary>
/// 클래스를 싱글톤으로 만들어주는 제네릭 클래스입니다.
/// 사용법: public class MyManager : Singleton<MyManager> { ... }
/// </summary>
public class Singleton<T> where T : class, new()
{
    private static T _instance;
    public static T Instance => _instance ??= new T();
}

#endregion

#region === 주요 유틸리티 (Main Utilities) ===

public static class Utils
{
    /// <summary>
    /// 월드 좌표를 특정 Canvas의 UI 좌표로 변환합니다.
    /// </summary>
    public static Vector2 WorldToCanvasPosition(Vector3 worldPos, Camera camera, Canvas canvas)
    {
        Vector2 viewportPos = camera.WorldToViewportPoint(worldPos);
        RectTransform canvasRect = canvas.GetComponent<RectTransform>();
        return new Vector2(
            (viewportPos.x * canvasRect.sizeDelta.x) - (canvasRect.sizeDelta.x * 0.5f),
            (viewportPos.y * canvasRect.sizeDelta.y) - (canvasRect.sizeDelta.y * 0.5f)
        );
    }

    /// <summary>
    /// Enum 타입의 무작위 값을 반환합니다.
    /// </summary>
    public static T GetRandomEnum<T>() where T : Enum
    {
        Array values = Enum.GetValues(typeof(T));
        return (T)values.GetValue(Random.Range(0, values.Length));
    }
    
    /// <summary>
    /// Enum 타입의 다음 값을 순환하며 반환합니다.
    /// </summary>
    public static T GetNextEnum<T>(T current) where T : Enum
    {
        Array values = Enum.GetValues(typeof(T));
        int currentIndex = Array.IndexOf(values, current);
        int nextIndex = (currentIndex + 1) % values.Length;
        return (T)values.GetValue(nextIndex);
    }
}

#endregion

#region === 확장 메서드 (Extension Methods) ===

public static class Extensions
{
    // ─ GameObject & Component ──────────────────────────────────────────
    
    /// <summary>
    /// 컴포넌트가 없으면 추가하고, 있으면 가져옵니다.
    /// </summary>
    public static T GetOrAddComponent<T>(this GameObject go) where T : Component
    {
        if (!go.TryGetComponent(out T component))
        {
            component = go.AddComponent<T>();
        }
        return component;
    }
    
    /// <summary>
    /// 자기 자신을 포함하여 부모에서 컴포넌트를 찾습니다.
    /// </summary>
    public static T GetComponentInParentWithMe<T>(this Component com)
    {
        T component = com.GetComponent<T>();
        if (component == null)
        {
            component = com.GetComponentInParent<T>();
        }
        return component;
    }

    /// <summary>
    /// GameObject가 특정 LayerMask에 포함되는지 검사합니다.
    /// </summary>
    public static bool IsInLayerMask(this GameObject go, LayerMask mask) =>
        (mask.value & (1 << go.layer)) != 0;
        
    /// <summary>
    /// 런타임과 에디터 환경에 맞춰 안전하게 오브젝트를 파괴합니다.
    /// </summary>
    public static void CustomDestroy(this GameObject go)
    {
        #if UNITY_EDITOR
            GameObject.DestroyImmediate(go);
        #else
            GameObject.Destroy(go);
        #endif
    }
    
    // ─ Transform ───────────────────────────────────────────────────────
    
    /// <summary>
    /// 모든 자식 오브젝트를 파괴합니다.
    /// </summary>
    public static void DestroyChildren(this Transform parent)
    {
        for (int i = parent.childCount - 1; i >= 0; i--)
        {
            parent.GetChild(i).gameObject.CustomDestroy();
        }
    }
    
    /// <summary>
    /// Transform의 Local Position, Rotation, Scale을 초기화합니다.
    /// </summary>
    public static void ResetLocal(this Transform t)
    {
        t.localPosition = Vector3.zero;
        t.localRotation = Quaternion.identity;
        t.localScale    = Vector3.one;
    }
    
    /// <summary>
    /// 2D 환경에서 특정 방향을 즉시 바라보도록 회전시킵니다.
    /// </summary>
    /// <param name="baseDirection">오브젝트의 '앞' 방향 벡터 (예: Vector2.up은 위쪽이 앞)</param>
    public static void LookAtDirection2D(this Transform transform, Vector2 direction, Vector2 baseDirection)
    {
        if (direction.sqrMagnitude < 0.0001f) return;
        
        float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;
        float baseOffsetAngle = Vector2.SignedAngle(Vector2.right, baseDirection);
        transform.rotation = Quaternion.Euler(0, 0, targetAngle - baseOffsetAngle);
    }

    // ─ Math & Vector ───────────────────────────────────────────────────

    /// <summary>
    /// 값의 범위를 다른 범위로 리맵핑합니다.
    /// </summary>
    public static float Remap(this float value, float from1, float to1, float from2, float to2) =>
        (value - from1) / (to1 - from1) * (to2 - from2) + from2;
        
    /// <summary>
    /// 두 float 값이 주어진 허용 오차 내에서 거의 같은지 비교합니다.
    /// </summary>
    public static bool Approximately(this float a, float b, float tolerance = 0.0001f) =>
        Mathf.Abs(a - b) <= tolerance;

    /// <summary>
    /// 두 Vector3 값이 주어진 허용 오차 내에서 거의 같은지 비교합니다.
    /// </summary>
    public static bool Approximately(this Vector3 a, Vector3 b, float tolerance = 0.0001f) =>
        (a - b).sqrMagnitude <= tolerance * tolerance;

    /// <summary>
    /// Vector3의 축을 바꿉니다. (x, y, z) -> (x, z, y)
    /// </summary>
    public static Vector3 XZY(this Vector3 v) => new Vector3(v.x, v.z, v.y);
    
    /// <summary>
    /// Vector3의 X, Y, Z 중 하나의 값만 변경된 새 Vector3를 반환합니다.
    /// </summary>
    public static Vector3 WithX(this Vector3 v, float x) => new Vector3(x, v.y, v.z);
    public static Vector3 WithY(this Vector3 v, float y) => new Vector3(v.x, y, v.z);
    public static Vector3 WithZ(this Vector3 v, float z) => new Vector3(v.x, v.y, z);

    // ─ Collections ─────────────────────────────────────────────────────

    /// <summary>
    /// 리스트에서 무작위 아이템 하나를 반환합니다.
    /// </summary>
    public static T GetRandom<T>(this IList<T> list)
    {
        if (list == null || list.Count == 0) return default;
        return list[Random.Range(0, list.Count)];
    }

    /// <summary>
    /// 리스트의 인덱스 범위를 벗어나지 않게 안전하게 아이템을 가져옵니다.
    /// </summary>
    public static T GetSafe<T>(this IList<T> list, int index)
    {
        if (list == null || index < 0 || index >= list.Count) return default;
        return list[index];
    }
    
    /// <summary>
    /// 리스트의 순서를 무작위로 섞습니다. (Fisher-Yates shuffle)
    /// </summary>
    public static void Shuffle<T>(this IList<T> list)
    {
        for (int i = list.Count - 1; i > 0; i--)
        {
            int j = Random.Range(0, i + 1);
            (list[i], list[j]) = (list[j], list[i]);
        }
    }
    
    // ─ Physics ─────────────────────────────────────────────────────────

    /// <summary>
    /// 레이어 인덱스(int)를 비트 마스크로 변환합니다. (ex: 9 -> 512)
    /// </summary>
    public static int ToLayerMask(this int layer) => 1 << layer;

    /// <summary>
    /// BoxCollider의 월드 좌표 기준으로 OverlapBox를 수행합니다.
    /// </summary>
    public static Collider[] OverlapBox(this BoxCollider box, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal)
    {
        Transform t = box.transform;
        return Physics.OverlapBox(t.TransformPoint(box.center), box.size * 0.5f, t.rotation, layerMask, queryTriggerInteraction);
    }
}

#endregion
